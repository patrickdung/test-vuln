name: Build containers
on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  init-env:
    name: Set env outputs
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
      # id-token: write # needed for signing the images with GitHub OIDC **not production ready**
    outputs:
      container_registry_base_uri: ${{ steps.set-env.outputs.container_registry_base_uri }}
    steps:
      - name: Set env for later jobs
        id: set-env
          # ## echo "::set-output name=container_registry_base_uri::$(echo $CONTAINER_REGISTRY_BASE_URI)"
        run: |
          echo "::set-output name=container_registry_base_uri::$(echo ${{env.REGISTRY}}/${{env.IMAGE_NAME}})"
  build-docker-image:
    name: Build Docker Images
    needs: [init-env]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      packages: write
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
      # id-token: 'read'
    outputs:
      remote_branch_name: ${{ steps.get-remote-branch-name.outputs.remote_branch_name }}
      container_registry_base_uri: ${{ steps.set-env.outputs.container_registry_base_uri }}
      container_digest_amd64: ${{ steps.get-container-digest-amd64.outputs.container_digest }}
      container_digest_arm64: ${{ steps.get-container-digest-arm64.outputs.container_digest }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GH container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PUBLISH_TOKEN }}
          # ## Can't login with GITHUB_TOKEN
          # ##password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push to container registry
        uses: docker/build-push-action@v2
        # ./Dockerfile is in the upper directory
        # ./wiki is the wikijs source code repo
        with:
          context: .
          file: ./Dockerfile
          ## build-args: |
          ##  ARCH=${{ env.TO_BE_FIXED }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: "Get the digest of container (amd64)"
        id: get-container-digest-amd64
        run: |
          skopeo inspect --raw docker://${{env.REGISTRY}}/${{env.IMAGE_NAME}}:main | \
            jq -r '.manifests[] | select(.platform .architecture=="amd64" and .platform .os=="linux") | .digest' > /tmp/container-digest-amd64
          echo "::set-output name=container_digest::$(cat /tmp/container-digest-amd64)"
      - name: "Get the digest of container (arm64)"
        id: get-container-digest-arm64
        run: |
          skopeo inspect --raw docker://${{env.REGISTRY}}/${{env.IMAGE_NAME}}:main | \
            jq -r '.manifests[] | select(.platform .architecture=="arm64" and .platform .os=="linux") | .digest' > /tmp/container-digest-arm64
          echo "::set-output name=container_digest::$(cat /tmp/container-digest-arm64)"

  build-sbom-and-scanning:
    needs: [init-env, build-docker-image]
    name: Build SBOM and image scanning
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: none
      checks: none
      contents: read
      deployments: none
      issues: none
      packages: write
      pull-requests: none
      repository-projects: none
      # GH action/scanners for sarif reports
      security-events: write
      statuses: none
      # id-token: write # needed for signing the images with GitHub OIDC **not production ready**
    strategy:
      # max-parallel: 1
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform_image_uri: "${{needs.init-env.outputs.container_registry_base_uri}}@${{ needs.build-docker-image.outputs.container_digest_amd64 }}"
          - arch: arm64
            platform_image_uri: "${{needs.init-env.outputs.container_registry_base_uri}}@${{ needs.build-docker-image.outputs.container_digest_arm64 }}"

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to GH container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PUBLISH_TOKEN }}

      - name: Anchore sbom-action
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          image: ${{matrix.platform_image_uri}}
          #artifact-name: container-sbom-${{ matrix.arch }}.spdx.json
          #output-file: "${{ github.event.repository.name }}-sbom.spdx.json"
          artifact-name: container-sbom-${{ matrix.arch }}.spdx.json

      - uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.spdx.json$"

      - name: Scan container by Anchore
        uses: anchore/scan-action@v3
        id: scan-by-anchore-with-spdx-json
        with:
          fail-build: false
          # seems can only provide path, and no option to provide a path with filename
          #path: "./container-sbom-${{matrix.arch}}.spdx.json"
          #path: "."
          acs-report-enable: true
          #sbom: "${{ github.event.repository.name }}-sbom.spdx.json"
          sbom: container-sbom-${{ matrix.arch }}.spdx.json

      - name: Rename results.sarif with architecture name
        run: |
          mv results.sarif ${{matrix.arch}}-container-anchore-results.sarif

      - name: Upload Anchore SARIF report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          # the steps outputs would contain './'
          # sarif_file: anchore-${{matrix.arch}}-${{ steps.scan-by-anchore.outputs.sarif }}
          sarif_file: ./${{matrix.arch}}-container-anchore-results.sarif
          category: anchore-${{matrix.arch}}

      - name: Use Snyk to scan container
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
        with:
          image: ${{matrix.platform_image_uri}}
          args: --file=Dockerfile --app-vulns

      - name: Rename results.sarif with architecture name
        run: |
          mv snyk.sarif ${{matrix.arch}}-container-snyk-results.sarif

      - name: Upload result to GitHub Code Scanning security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{matrix.arch}}-container-snyk-results.sarif

      - name: Scan container with Trivy
        uses: aquasecurity/trivy-action@master
        id: scan-by-trivy
        with:
          image-ref: '${{matrix.platform_image_uri}}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: '${{matrix.arch}}-container-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy SARIF report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: '${{matrix.arch}}-container-trivy-results.sarif'
          category: trivy-${{matrix.arch}}

      #- name: Scan container by Anchore
      #  uses: anchore/scan-action@v3
      #  # ## id: scan-by-anchore-${{matrix.arch}}
      #  id: scan-by-anchore-on-image
      #  with:
      #    fail-build: false
      #    image: "${{matrix.platform_image_uri}}"
      #    acs-report-enable: true
#
#      - name: Rename results.sarif with architecture name
#        run: |
#          mv results.sarif ${{matrix.arch}}-container-anchore-results.sarif
#
#      - name: Upload Anchore SARIF report to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v1
#        with:
#          # the steps outputs would contain './'
#          # ##sarif_file: ${{matrix.arch}}-${{ steps.scan-by-anchore-${{matrix.arch}}.outputs.sarif }}
#          # sarif_file: anchore-${{matrix.arch}}-${{ steps.scan-by-anchore.outputs.sarif }}
#          sarif_file: ./${{matrix.arch}}-container-anchore-results.sarif
#          category: anchore-${{matrix.arch}}

      - name: Sysdig Secure Inline Scan
        id: scan
        uses: sysdiglabs/scan-action@768d7626a14897e0948ea89c8437dd46a814b163
        with:
          # Tag of the image to analyse.
          image-tag: "${{matrix.platform_image_uri}}"
          # API token for Sysdig Scanning auth
          sysdig-secure-token: ${{ secrets.SYSDIG_SECURE_TOKEN}}
          # Sysdig secure endpoint. Please read: https://docs.sysdig.com/en/docs/administration/saas-regions-and-ip-ranges/
          # US-East https://secure.sysdig.com
          # US-West https://us2.app.sysdig.com
          # EU      https://eu1.app.sysdig.com
          sysdig-secure-url: https://app.au1.sysdig.com
          dockerfile-path: ./Dockerfile
          input-type: docker-daemon
          ignore-failed-scan: true
          # Sysdig inline scanner requires privileged rights
          run-as-user: root

      - name: Rename Sysdig sarif with architecture name
        run: |
          mv ${{ steps.scan.outputs.sarifReport }} ${{matrix.arch}}-container-sysdig-results.sarif

      - name: Upload Sysdig SARIF report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: '${{matrix.arch}}-container-sysdig-results.sarif'
          category: sysdig-${{matrix.arch}}

      - name: Inspect SARIF report(s)
        run: |
          echo ${{matrix.arch}}
          cat ${{matrix.arch}}-container-snyk-results.sarif

      - name: Upload SARIF reports to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: "SARIF reports when containers are built"
          path: |
            ./*.sarif
